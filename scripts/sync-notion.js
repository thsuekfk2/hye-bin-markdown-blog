const { Client } = require("@notionhq/client");
const { NotionToMarkdown } = require("notion-to-md");
const fs = require("fs");
const path = require("path");

// ÌôòÍ≤ΩÎ≥ÄÏàò ÏàòÎèô Î°úÎìú
function loadEnv() {
  const envPath = path.join(process.cwd(), ".env");
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, "utf8");
    envContent.split("\n").forEach((line) => {
      const [key, value] = line.split("=");
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}

loadEnv();

// ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú ÏÑ§Ï†ï ÏùΩÍ∏∞
const notion = new Client({
  auth: process.env.NOTION_TOKEN,
});

const n2m = new NotionToMarkdown({
  notionClient: notion,
  config: {
    parseChildPages: false,
    convertImagesToBase64: false,
  },
});

// ÎÖ∏ÏÖò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ID (ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú ÏÑ§Ï†ï)
const DATABASE_ID = process.env.NOTION_DATABASE_ID;
// ÏΩòÌÖêÏ∏† ÎîîÎ†âÌÜ†Î¶¨ Í≤ΩÎ°ú
const CONTENTS_DIR = path.join(process.cwd(), "contents");

async function syncNotionToMDX() {
  try {
    console.log("üöÄ ÎÖ∏ÏÖòÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë...");

    // ÎÖ∏ÏÖò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Î™®Îì† Í∏Ä Í∞ÄÏ†∏Ïò§Í∏∞ (ÌÖåÏä§Ìä∏Ïö©)
    const response = await notion.databases.query({
      database_id: DATABASE_ID,
      sorts: [
        {
          property: "Ïù¥Î¶Ñ",
          direction: "descending",
        },
      ],
    });

    console.log(`üìù ${response.results.length}Í∞úÏùò Í∏ÄÏùÑ Ï∞æÏïòÏäµÎãàÎã§.`);

    for (const page of response.results) {
      await processPage(page);
    }

    console.log("ÎèôÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!");
  } catch (error) {
    console.error("ÎèôÍ∏∞Ìôî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:", error);
  }
}

async function processPage(page) {
  try {
    // ÌéòÏù¥ÏßÄ ÏÜçÏÑ± Ï∂îÏ∂ú
    const properties = page.properties;

    console.log("ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏÜçÏÑ±Îì§:", Object.keys(properties));

    // Ïã§Ï†ú ÏÜçÏÑ±ÏóêÏÑú Í∞í Ï∂îÏ∂ú (ÏòÅÎ¨∏ ÏÜçÏÑ±Î™Ö Í∏∞Ï§Ä)
    const title =
      properties["Ïù¥Î¶Ñ"]?.title?.[0]?.plain_text ||
      properties["Title"]?.rich_text?.[0]?.plain_text ||
      "";
    const slug = properties["Slug"]?.rich_text?.[0]?.plain_text || "";
    const category = properties["Category"]?.select?.name || "post";
    const date = properties["Date"]?.date?.start || "";
    const description =
      properties["Description"]?.rich_text?.[0]?.plain_text || "";
    const tags = properties["Tags"]?.multi_select?.map((tag) => tag.name) || [];
    const thumbnail =
      properties["Thumbnail"]?.files?.[0]?.file?.url ||
      properties["Thumbnail"]?.files?.[0]?.external?.url ||
      "";
    const lastEditedTime = page.last_edited_time;

    // ÌïÑÏàò ÌïÑÎìú ÌôïÏù∏
    if (!title || !slug || !date) {
      console.log(
        `‚ö†Ô∏è  Í±¥ÎÑàÎõ∞Í∏∞: "${title}" - ÌïÑÏàò ÌïÑÎìú ÎàÑÎùΩ (Ï†úÎ™©: ${!!title}, Ïä¨Îü¨Í∑∏: ${!!slug}, ÎÇ†Ïßú: ${!!date})`,
      );
      return;
    }

    // ÎßàÌÅ¨Îã§Ïö¥ Î≥ÄÌôò
    const mdblocks = await n2m.pageToMarkdown(page.id);
    const mdString = n2m.toMarkdownString(mdblocks);

    // ÌååÏùº Í≤ΩÎ°ú Í≤∞Ï†ï
    const filePath = getFilePath(category, slug, date);

    // Í∏∞Ï°¥ ÌååÏùºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† ÏàòÏ†ï ÎÇ†Ïßú ÎπÑÍµê
    if (fs.existsSync(filePath)) {
      const existingContent = fs.readFileSync(filePath, "utf8");
      const frontmatterMatch = existingContent.match(/^---\n([\s\S]*?)\n---/);

      if (frontmatterMatch) {
        const existingLastEdited = frontmatterMatch[1].match(
          /lastEditedTime: "([^"]+)"/,
        );

        if (existingLastEdited && existingLastEdited[1] === lastEditedTime) {
          console.log(`‚è≠Ô∏è  Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏóÜÏùå: "${title}" - Í±¥ÎÑàÎõ∞Í∏∞`);
          return;
        }
      }
    }

    // frontmatter ÏÉùÏÑ± (lastEditedTime Ìè¨Ìï®)
    const frontmatter = createFrontmatter({
      title,
      slug,
      date,
      description,
      thumbnail,
      tags,
      lastEditedTime,
    });

    // ÏµúÏ¢Ö MDX ÎÇ¥Ïö©
    const cleanedMarkdown = mdString.parent.replace(/\n\n\n+/g, "\n\n").trim();
    const mdxContent = `${frontmatter}\n\n${cleanedMarkdown}`;

    // ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    // ÌååÏùº Ïì∞Í∏∞
    fs.writeFileSync(filePath, mdxContent, "utf8");
    console.log(`ÏóÖÎç∞Ïù¥Ìä∏Îê®: ${filePath}`);
  } catch (error) {
    console.error(`ÌéòÏù¥ÏßÄ Ï≤òÎ¶¨ Ïã§Ìå® (${page.id}):`, error);
  }
}

function createFrontmatter({
  title,
  slug,
  date,
  description,
  thumbnail,
  tags,
  lastEditedTime,
}) {
  const tagList =
    tags.length > 0 ? tags.map((tag) => `"${tag}"`).join(", ") : "";

  return `---
title: "${title}"
slug: "${slug}"
date: "${date}"
description: "${description}"
thumbnail: "${thumbnail}"
tags: ${tags.length > 0 ? `[${tagList}]` : `[]`}
lastEditedTime: ${lastEditedTime ? `${lastEditedTime}` : ""}
---`;
}

function getFilePath(category, slug, date) {
  if (category === "log") {
    // Î°úÍ∑∏Îäî ÎÇ†Ïßú Í∏∞Î∞ò Ìè¥Îçî Íµ¨Ï°∞
    const dateObj = new Date(date);
    const year = dateObj.getFullYear().toString().slice(-2); // 24
    const month = String(dateObj.getMonth() + 1).padStart(2, "0"); // 03
    const day = String(dateObj.getDate()).padStart(2, "0"); // 15

    const folderName = `${year}${month}`; // 2403
    const fileName = `${year}${month}${day}.mdx`; // 240315.mdx

    return path.join(CONTENTS_DIR, "log", folderName, fileName);
  } else {
    // Ìè¨Ïä§Ìä∏Îäî Ïä¨Îü¨Í∑∏ Í∏∞Î∞ò
    return path.join(CONTENTS_DIR, "post", `${slug}.mdx`);
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  syncNotionToMDX();
}

module.exports = { syncNotionToMDX };
