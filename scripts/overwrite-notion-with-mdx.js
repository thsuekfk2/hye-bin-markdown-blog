const { Client } = require('@notionhq/client');
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

// ÌôòÍ≤ΩÎ≥ÄÏàò ÏàòÎèô Î°úÎìú
function loadEnv() {
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}

loadEnv();

const notion = new Client({
  auth: process.env.NOTION_TOKEN,
});

const DATABASE_ID = process.env.NOTION_DATABASE_ID;
const CONTENTS_DIR = path.join(process.cwd(), 'contents');

async function overwriteNotionWithMDX() {
  try {
    console.log('üîÑ MDX ÌååÏùº ÎÇ¥Ïö©ÏúºÎ°ú Notion ÌéòÏù¥ÏßÄÎì§ÏùÑ ÎçÆÏñ¥ÏîåÏö∞Îäî Ï§ë...');
    
    // Î™®Îì† MDX ÌååÏùº Ï∞æÍ∏∞
    const mdxFiles = [];
    
    // post Ìè¥ÎçîÏùò MDX ÌååÏùºÎì§
    const postDir = path.join(CONTENTS_DIR, 'post');
    if (fs.existsSync(postDir)) {
      const postFiles = fs.readdirSync(postDir)
        .filter(file => file.endsWith('.mdx'))
        .map(file => ({
          filePath: path.join(postDir, file),
          category: 'post',
          fileName: file
        }));
      mdxFiles.push(...postFiles);
    }
    
    // log Ìè¥ÎçîÏùò MDX ÌååÏùºÎì§
    const logDir = path.join(CONTENTS_DIR, 'log');
    if (fs.existsSync(logDir)) {
      const logFolders = fs.readdirSync(logDir);
      for (const folder of logFolders) {
        const folderPath = path.join(logDir, folder);
        if (fs.statSync(folderPath).isDirectory()) {
          const logFiles = fs.readdirSync(folderPath)
            .filter(file => file.endsWith('.mdx'))
            .map(file => ({
              filePath: path.join(folderPath, file),
              category: 'log',
              fileName: file
            }));
          mdxFiles.push(...logFiles);
        }
      }
    }
    
    console.log(`üìÑ Ï¥ù ${mdxFiles.length}Í∞úÏùò MDX ÌååÏùºÏùÑ Ï∞æÏïòÏäµÎãàÎã§.`);
    
    let updatedCount = 0;
    let errorCount = 0;
    const failedFiles = [];
    
    for (const fileInfo of mdxFiles) {
      const result = await overwriteNotionPage(fileInfo);
      if (result.success) {
        updatedCount++;
        console.log(`   ‚úÖ ÎçÆÏñ¥ÏîåÏö∞Í∏∞ ÏôÑÎ£å: ${fileInfo.fileName}`);
      } else {
        errorCount++;
        failedFiles.push({ file: fileInfo.fileName, error: result.error });
        console.log(`   ‚ùå ÎçÆÏñ¥ÏîåÏö∞Í∏∞ Ïã§Ìå®: ${fileInfo.fileName} - ${result.error}`);
      }
    }
    
    console.log(`\n‚úÖ Ï≤òÎ¶¨ ÏôÑÎ£å: ÏÑ±Í≥µ ${updatedCount}Í∞ú, Ïã§Ìå® ${errorCount}Í∞ú`);
    
    if (failedFiles.length > 0) {
      console.log('\n‚ùå Ïã§Ìå®Ìïú ÌååÏùºÎì§:');
      failedFiles.forEach(({ file, error }) => {
        console.log(`   - ${file}: ${error}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå ÎçÆÏñ¥ÏîåÏö∞Í∏∞ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§:', error);
  }
}

async function overwriteNotionPage({ filePath, category, fileName }) {
  try {
    console.log(`üîÑ Ï≤òÎ¶¨ Ï§ë: ${fileName}`);
    
    // MDX ÌååÏùº ÏùΩÍ∏∞
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const { data: frontmatter, content } = matter(fileContent);
    
    // frontmatterÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú
    const title = frontmatter.title || fileName.replace('.mdx', '');
    const slug = frontmatter.slug || fileName.replace('.mdx', '');
    const date = frontmatter.date || new Date().toISOString().split('T')[0];
    const description = frontmatter.description || '';
    const tags = frontmatter.tags || [];
    const thumbnail = frontmatter.thumbnail || '';
    
    console.log(`   - Ï†úÎ™©: ${title}`);
    console.log(`   - Ïä¨Îü¨Í∑∏: ${slug}`);
    console.log(`   - Ïπ¥ÌÖåÍ≥†Î¶¨: ${category}`);
    
    // ÎÖ∏ÏÖòÏóêÏÑú Í∏∞Ï°¥ ÌéòÏù¥ÏßÄ Ï∞æÍ∏∞
    const existingPage = await findExistingPage(slug);
    if (!existingPage) {
      return { success: false, error: 'NotionÏóêÏÑú Ìï¥Îãπ ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå' };
    }
    
    // ÎßàÌÅ¨Îã§Ïö¥ÏùÑ ÎÖ∏ÏÖò Î∏îÎ°ùÏúºÎ°ú Î≥ÄÌôò
    const blocks = await convertMarkdownToBlocks(content);
    console.log(`   - ÏÉùÏÑ±Îêú Î∏îÎ°ù Ïàò: ${blocks.length}`);
    
    // Í∏∞Ï°¥ ÌéòÏù¥ÏßÄÏùò Î™®Îì† ÏûêÏãù Î∏îÎ°ù ÏÇ≠Ï†ú
    await clearPageBlocks(existingPage.id);
    
    // ÌéòÏù¥ÏßÄ ÏÜçÏÑ± ÏóÖÎç∞Ïù¥Ìä∏
    await notion.pages.update({
      page_id: existingPage.id,
      properties: {
        'Ïù¥Î¶Ñ': {
          title: [
            {
              text: {
                content: title,
              },
            },
          ],
        },
        'Slug': {
          rich_text: [
            {
              text: {
                content: slug,
              },
            },
          ],
        },
        'Category': {
          select: {
            name: category,
          },
        },
        'Status': {
          select: {
            name: 'Î∞úÌñâ',
          },
        },
        'Date': {
          date: {
            start: date,
          },
        },
        'Description': {
          rich_text: [
            {
              text: {
                content: description,
              },
            },
          ],
        },
        'Tags': {
          multi_select: tags.map(tag => ({ name: tag })),
        },
        'Thumbnail': {
          files: thumbnail && !thumbnail.includes('notion.so') && !thumbnail.includes('prod-files-secure.s3.us-west-2.amazonaws.com') ? [
            {
              name: 'thumbnail',
              external: {
                url: thumbnail.startsWith('http') ? thumbnail : `https://www.hyebin.me${thumbnail}`
              }
            }
          ] : []
        },
      },
    });
    
    // ÏÉàÎ°úÏö¥ Î∏îÎ°ùÎì§ Ï∂îÍ∞Ä (100Í∞úÏî© ÎÇòÎàÑÏñ¥ÏÑú)
    if (blocks.length > 0) {
      for (let i = 0; i < blocks.length; i += 100) {
        const chunk = blocks.slice(i, i + 100);
        await notion.blocks.children.append({
          block_id: existingPage.id,
          children: chunk,
        });
        console.log(`   üìù ${Math.min(i + 100, blocks.length)}/${blocks.length} Î∏îÎ°ù Ï∂îÍ∞ÄÎê®`);
      }
    }
    
    return { success: true };
    
  } catch (error) {
    console.error(`   ‚ùå Ï≤òÎ¶¨ Ïã§Ìå® (${fileName}):`, error.message);
    const errorMsg = error.body?.message || error.message;
    return { success: false, error: errorMsg };
  }
}

async function findExistingPage(slug) {
  try {
    const response = await notion.databases.query({
      database_id: DATABASE_ID,
      filter: {
        property: 'Slug',
        rich_text: {
          equals: slug,
        },
      },
    });
    
    return response.results.length > 0 ? response.results[0] : null;
  } catch (error) {
    console.warn(`Ïä¨Îü¨Í∑∏ ÌôïÏù∏ Ï§ë Ïò§Î•ò: ${error.message}`);
    return null;
  }
}

async function clearPageBlocks(pageId) {
  try {
    const blocks = await notion.blocks.children.list({
      block_id: pageId,
    });
    
    // Î™®Îì† Î∏îÎ°ù ÏÇ≠Ï†ú
    for (const block of blocks.results) {
      await notion.blocks.delete({
        block_id: block.id,
      });
    }
    
    console.log(`   üóëÔ∏è  Í∏∞Ï°¥ Î∏îÎ°ù ${blocks.results.length}Í∞ú ÏÇ≠Ï†úÎê®`);
  } catch (error) {
    console.warn(`   ‚ö†Ô∏è  Î∏îÎ°ù ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò: ${error.message}`);
  }
}

async function convertMarkdownToBlocks(content) {
  const blocks = [];
  const lines = content.split('\n');
  
  let currentBlock = null;
  let codeBlock = null;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    
    // ÏΩîÎìú Î∏îÎ°ù Ï≤òÎ¶¨
    if (line.startsWith('```')) {
      if (codeBlock) {
        // ÏΩîÎìú Î∏îÎ°ù Ï¢ÖÎ£å - ÎÖ∏ÏÖòÏùò 2000Ïûê Ï†úÌïú Ï≤òÎ¶¨
        let content = codeBlock.content.trim();
        if (content.length > 1900) {
          // ÌÅ∞ ÏΩîÎìú Î∏îÎ°ùÏùÑ Ïó¨Îü¨ Í∞úÎ°ú Î∂ÑÌï†
          const chunks = [];
          while (content.length > 0) {
            chunks.push(content.slice(0, 1900));
            content = content.slice(1900);
          }
          
          chunks.forEach((chunk, index) => {
            blocks.push({
              object: 'block',
              type: 'code',
              code: {
                rich_text: [
                  {
                    type: 'text',
                    text: {
                      content: chunk,
                    },
                  },
                ],
                language: codeBlock.language || 'plain text',
              },
            });
            
            if (index < chunks.length - 1) {
              // Î∂ÑÌï†Îêú Î∏îÎ°ù ÏÇ¨Ïù¥Ïóê Íµ¨Î∂ÑÏÑ† Ï∂îÍ∞Ä
              blocks.push({
                object: 'block',
                type: 'paragraph',
                paragraph: {
                  rich_text: [
                    {
                      type: 'text',
                      text: { content: '--- (continued) ---' },
                    },
                  ],
                },
              });
            }
          });
        } else {
          blocks.push({
            object: 'block',
            type: 'code',
            code: {
              rich_text: [
                {
                  type: 'text',
                  text: {
                    content: content,
                  },
                },
              ],
              language: codeBlock.language || 'plain text',
            },
          });
        }
        codeBlock = null;
      } else {
        // ÏΩîÎìú Î∏îÎ°ù ÏãúÏûë
        const rawLanguage = line.slice(3).trim() || 'plain text';
        // ÎÖ∏ÏÖòÏóêÏÑú ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Ïñ∏Ïñ¥Îì§ÏùÑ Îß§Ìïë
        const languageMap = {
          'jsx': 'javascript',
          'tsx': 'typescript',
          'js': 'javascript',
          'ts': 'typescript',
          'vue': 'javascript',
          'svelte': 'javascript',
          'astro': 'javascript'
        };
        const language = languageMap[rawLanguage] || rawLanguage;
        codeBlock = {
          language: language,
          content: '',
        };
      }
      continue;
    }
    
    if (codeBlock) {
      codeBlock.content += line + '\n';
      continue;
    }
    
    // Ï†úÎ™© Ï≤òÎ¶¨
    if (line.startsWith('# ')) {
      blocks.push({
        object: 'block',
        type: 'heading_1',
        heading_1: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: line.slice(2).trim(),
              },
            },
          ],
        },
      });
    } else if (line.startsWith('## ')) {
      blocks.push({
        object: 'block',
        type: 'heading_2',
        heading_2: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: line.slice(3).trim(),
              },
            },
          ],
        },
      });
    } else if (line.startsWith('### ')) {
      blocks.push({
        object: 'block',
        type: 'heading_3',
        heading_3: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: line.slice(4).trim(),
              },
            },
          ],
        },
      });
    }
    // ÏΩúÏïÑÏõÉ Ï≤òÎ¶¨
    else if (line.startsWith('> ')) {
      const content = line.slice(2).trim();
      let emoji = 'üí°';
      let text = content;
      
      // Ïù¥Î™®ÏßÄ Í∞êÏßÄ
      const emojiMatch = content.match(/^(\p{Emoji})\s+(.+)$/u);
      if (emojiMatch) {
        emoji = emojiMatch[1];
        text = emojiMatch[2];
      }
      
      blocks.push({
        object: 'block',
        type: 'callout',
        callout: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: text,
              },
            },
          ],
          icon: {
            emoji: emoji,
          },
        },
      });
    }
    // Î¶¨Ïä§Ìä∏ Ï≤òÎ¶¨
    else if (line.startsWith('- ') || line.startsWith('* ')) {
      blocks.push({
        object: 'block',
        type: 'bulleted_list_item',
        bulleted_list_item: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: line.slice(2).trim(),
              },
            },
          ],
        },
      });
    }
    // Î≤àÌò∏ Î¶¨Ïä§Ìä∏ Ï≤òÎ¶¨  
    else if (/^\d+\.\s/.test(line)) {
      blocks.push({
        object: 'block',
        type: 'numbered_list_item',
        numbered_list_item: {
          rich_text: [
            {
              type: 'text',
              text: {
                content: line.replace(/^\d+\.\s/, ''),
              },
            },
          ],
        },
      });
    }
    // Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨
    else if (line.match(/^!\[([^\]]*)\]\(([^)]+)\)$/)) {
      const match = line.match(/^!\[([^\]]*)\]\(([^)]+)\)$/);
      const alt = match[1];
      const src = match[2];
      
      // ÏÉÅÎåÄ Í≤ΩÎ°úÎ•º Ï†àÎåÄ URLÎ°ú Î≥ÄÌôò
      const imageUrl = src.startsWith('http') ? src : `https://www.hyebin.me${src}`;
      
      blocks.push({
        object: 'block',
        type: 'image',
        image: {
          type: 'external',
          external: {
            url: imageUrl,
          },
          caption: alt ? [
            {
              type: 'text',
              text: {
                content: alt,
              },
            },
          ] : [],
        },
      });
    }
    // Îπà Ï§Ñ Ï≤òÎ¶¨
    else if (line.trim() === '') {
      // Îπà Ï§ÑÏùÄ Í±¥ÎÑàÎõ∞Í∏∞
      continue;
    }
    // ÏùºÎ∞ò ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨
    else if (line.trim()) {
      // ÍµµÏùÄ Í∏ÄÏî®, Í∏∞Ïö∏ÏûÑ Îì±ÏùÑ Ìè¨Ìï®Ìïú Î¶¨ÏπòÌÖçÏä§Ìä∏ ÌååÏã±
      const richText = parseRichText(line);
      blocks.push({
        object: 'block',
        type: 'paragraph',
        paragraph: {
          rich_text: richText,
        },
      });
    }
  }
  
  return blocks;
}

function parseRichText(text) {
  // Í∞ÑÎã®Ìïú ÎßàÌÅ¨Îã§Ïö¥ ÌååÏã± (ÍµµÏùÄ Í∏ÄÏî®, Í∏∞Ïö∏ÏûÑ, ÏΩîÎìú)
  const richText = [];
  let currentText = text;
  
  // **ÍµµÏùÄ Í∏ÄÏî®** Ï≤òÎ¶¨
  const boldRegex = /\*\*(.*?)\*\*/g;
  let lastIndex = 0;
  let match;
  
  while ((match = boldRegex.exec(text)) !== null) {
    // ÍµµÏùÄ Í∏ÄÏî® ÏïûÏùò ÏùºÎ∞ò ÌÖçÏä§Ìä∏
    if (match.index > lastIndex) {
      const normalText = text.slice(lastIndex, match.index);
      if (normalText) {
        richText.push({
          type: 'text',
          text: { content: normalText },
        });
      }
    }
    
    // ÍµµÏùÄ Í∏ÄÏî®
    richText.push({
      type: 'text',
      text: { content: match[1] },
      annotations: { bold: true },
    });
    
    lastIndex = match.index + match[0].length;
  }
  
  // ÎÇ®ÏùÄ ÌÖçÏä§Ìä∏
  if (lastIndex < text.length) {
    const remainingText = text.slice(lastIndex);
    if (remainingText) {
      richText.push({
        type: 'text',
        text: { content: remainingText },
      });
    }
  }
  
  // ÏïÑÎ¨¥ Ïä§ÌÉÄÏùºÎßÅÏù¥ ÏóÜÎäî Í≤ΩÏö∞
  if (richText.length === 0) {
    richText.push({
      type: 'text',
      text: { content: text },
    });
  }
  
  return richText;
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  overwriteNotionWithMDX();
}

module.exports = { overwriteNotionWithMDX };